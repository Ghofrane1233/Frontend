stages:
  - test
  - build
  - deploy

variables:
  NODE_ENV: test

unit-tests:
  image: node:latest
  stage: test
  before_script:
    - npm ci
  script:
    - npm test -- --watchAll=false
  cache:
    paths:
      - node_modules/
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - package.json
        - "**/*.test.js"

integration-tests:
  image: node:latest
  stage: test
  before_script:
    - npm ci
  script:
    - echo "Running integration tests..."
    - npm run test:integration
  cache:
    paths:
      - node_modules/
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - package.json
        - "**/*.integration.test.js"
  needs: ["unit-tests"]

docker-build:
  image: docker:cli
  stage: build
  services:
    - docker:dind
  variables:
    DOCKER_IMAGE_NAME: ghofrane694/boardhub8:$CI_COMMIT_REF_SLUG
  before_script:
    - docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
  script:
    - docker build --pull -t "$DOCKER_IMAGE_NAME" .
    - docker push "$DOCKER_IMAGE_NAME"
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        docker tag "$DOCKER_IMAGE_NAME" "ghofrane694/boardhub8:latest"
        docker push "ghofrane694/boardhub8:latest"
      fi
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile
  needs: ["integration-tests"]

deploy-to-minikube:
  image: bitnami/kubectl:latest
  stage: deploy
  before_script:
    # This assumes you're using a self-hosted runner and have a valid kubeconfig file set in your environment
    - echo "$KUBECONFIG_CONTENT" > kubeconfig
    - export KUBECONFIG=$CI_PROJECT_DIR/kubeconfig
  script:
    - echo "Deploying to Minikube..."
    - kubectl config use-context minikube
    - kubectl apply -f k8s/deployment.yaml
    - kubectl apply -f k8s/service.yaml
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      exists:
        - k8s/deployment.yaml
        - k8s/service.yaml
  needs: ["docker-build"]
